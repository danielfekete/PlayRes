/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/uew9JCgoBiS
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Work_Sans } from 'next/font/google'
import { Chivo } from 'next/font/google'

work_sans({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Pagination, PaginationContent, PaginationItem, PaginationPrevious, PaginationLink, PaginationNext } from "@/components/ui/pagination"

export function games() {
  const [searchTerm, setSearchTerm] = useState("")
  const [currentPage, setCurrentPage] = useState(1)
  const [gamesPerPage] = useState(12)
  const games = [
    {
      id: 1,
      title: "The Witcher 3: Wild Hunt",
      cover: "/placeholder.svg",
      genre: "Action RPG",
      rating: 4.8,
      price: 19.99,
    },
    {
      id: 2,
      title: "Elden Ring",
      cover: "/placeholder.svg",
      genre: "Action RPG",
      rating: 4.9,
      price: 59.99,
    },
    {
      id: 3,
      title: "Cyberpunk 2077",
      cover: "/placeholder.svg",
      genre: "Action RPG",
      rating: 3.5,
      price: 39.99,
    },
    {
      id: 4,
      title: "Horizon Zero Dawn",
      cover: "/placeholder.svg",
      genre: "Action Adventure",
      rating: 4.7,
      price: 19.99,
    },
    {
      id: 5,
      title: "God of War",
      cover: "/placeholder.svg",
      genre: "Action Adventure",
      rating: 4.8,
      price: 39.99,
    },
    {
      id: 6,
      title: "Red Dead Redemption 2",
      cover: "/placeholder.svg",
      genre: "Action Adventure",
      rating: 4.8,
      price: 59.99,
    },
    {
      id: 7,
      title: "Assassin's Creed Valhalla",
      cover: "/placeholder.svg",
      genre: "Action Adventure",
      rating: 4.2,
      price: 49.99,
    },
    {
      id: 8,
      title: "Halo Infinite",
      cover: "/placeholder.svg",
      genre: "First-Person Shooter",
      rating: 4.5,
      price: 59.99,
    },
    {
      id: 9,
      title: "Call of Duty: Warzone",
      cover: "/placeholder.svg",
      genre: "Battle Royale",
      rating: 4.1,
      price: 0.0,
    },
    {
      id: 10,
      title: "Fortnite",
      cover: "/placeholder.svg",
      genre: "Battle Royale",
      rating: 3.9,
      price: 0.0,
    },
    {
      id: 11,
      title: "Minecraft",
      cover: "/placeholder.svg",
      genre: "Sandbox",
      rating: 4.7,
      price: 19.99,
    },
    {
      id: 12,
      title: "Grand Theft Auto V",
      cover: "/placeholder.svg",
      genre: "Action Adventure",
      rating: 4.5,
      price: 29.99,
    },
  ]
  const filteredGames = games.filter((game) => game.title.toLowerCase().includes(searchTerm.toLowerCase()))
  const indexOfLastGame = currentPage * gamesPerPage
  const indexOfFirstGame = indexOfLastGame - gamesPerPage
  const currentGames = filteredGames.slice(indexOfFirstGame, indexOfLastGame)
  const totalPages = Math.ceil(filteredGames.length / gamesPerPage)
  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber)
  }
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Games</h1>
      <div className="mb-6">
        <Input
          type="text"
          placeholder="Search games..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full max-w-md"
        />
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {currentGames.map((game) => (
          <Card key={game.id}>
            <img
              src="/placeholder.svg"
              alt={game.title}
              width={400}
              height={300}
              className="w-full h-48 object-cover rounded-t-lg"
              style={{ aspectRatio: "400/300", objectFit: "cover" }}
            />
            <CardContent className="p-4">
              <h3 className="text-lg font-bold mb-2">{game.title}</h3>
              <p className="text-muted-foreground mb-2">{game.genre}</p>
              <div className="flex items-center mb-2">
                <StarIcon className="w-4 h-4 text-primary mr-1" />
                <span className="text-primary font-bold">{game.rating}</span>
              </div>
              <div className="font-bold text-lg">${game.price}</div>
            </CardContent>
          </Card>
        ))}
      </div>
      <div className="mt-8 flex justify-center">
        <Pagination>
          <PaginationContent>
            <PaginationItem>
              <PaginationPrevious
                href="#"
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
              />
            </PaginationItem>
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
              <PaginationItem key={page}>
                <PaginationLink href="#" onClick={() => handlePageChange(page)} isActive={page === currentPage}>
                  {page}
                </PaginationLink>
              </PaginationItem>
            ))}
            <PaginationItem>
              <PaginationNext
                href="#"
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
              />
            </PaginationItem>
          </PaginationContent>
        </Pagination>
      </div>
    </div>
  )
}

function StarIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  )
}
